require 'rails_helper'

RSpec.describe ForecastService do
  it 'can make a call and retrieve weather data' do
    lat = 39.738453
    lng = -104.984853
    forecast_data = ForecastService.get_weather(lat, lng)
    expect(forecast_data).to be_a(Hash)
    expect(forecast_data).to have_key(:lat)
    expect(forecast_data).to have_key(:lon)
    expect(forecast_data[:lat]).to be_a(Float)
    expect(forecast_data[:lon]).to be_a(Float)
    expect(forecast_data).to have_key(:current)
    expect(forecast_data[:current]).to be_a(Hash)
    expect(forecast_data).to have_key(:hourly)
    expect(forecast_data[:hourly]).to be_a(Array)
    expect(forecast_data).to have_key(:daily)
    expect(forecast_data[:daily]).to be_a(Array)
    current_forecast_data = forecast_data[:current]
    expect(current_forecast_data).to be_a(Hash)
    expect(current_forecast_data).to have_key(:dt)
    expect(current_forecast_data[:dt]).to be_an(Integer)
    expect(current_forecast_data).to have_key(:sunrise)
    expect(current_forecast_data[:sunrise]).to be_an(Integer)
    expect(current_forecast_data).to have_key(:sunset)
    expect(current_forecast_data[:sunset]).to be_an(Integer)
    expect(current_forecast_data).to have_key(:temp)
    expect(current_forecast_data[:temp]).to be_a(Float)
    expect(current_forecast_data).to have_key(:feels_like)
    expect(current_forecast_data[:feels_like]).to be_a(Float)
    expect(current_forecast_data).to have_key(:humidity)
    expect(current_forecast_data[:humidity]).to be_an(Integer)
    expect(current_forecast_data).to have_key(:uvi)
    expect(current_forecast_data[:uvi]).to be_a(Float)
    expect(current_forecast_data).to have_key(:visibility)
    expect(current_forecast_data[:visibility]).to be_an(Integer)
    expect(current_forecast_data).to have_key(:weather)
    expect(current_forecast_data[:weather]).to be_an(Array)
    expect(current_forecast_data[:weather][0]).to be_an(Hash)
    expect(current_forecast_data[:weather][0]).to have_key(:description)
    expect(current_forecast_data[:weather][0][:description]).to be_a(String)
    expect(current_forecast_data[:weather][0]).to have_key(:icon)
    expect(current_forecast_data[:weather][0][:icon]).to be_a(String)
    daily_forecast_data = forecast_data[:daily]
    expect(daily_forecast_data).to be_an(Array)
    expect(daily_forecast_data[0]).to be_a(Hash)
    expect(daily_forecast_data[0]).to have_key(:dt)
    expect(daily_forecast_data[0][:dt]).to be_an(Integer)
    expect(daily_forecast_data[0]).to have_key(:sunrise)
    expect(daily_forecast_data[0][:sunrise]).to be_an(Integer)
    expect(daily_forecast_data[0]).to have_key(:sunset)
    expect(daily_forecast_data[0][:sunset]).to be_an(Integer)
    expect(daily_forecast_data[0]).to have_key(:temp)
    expect(daily_forecast_data[0][:temp]).to be_a(Hash)
    expect(daily_forecast_data[0][:temp]).to have_key(:max)
    expect(daily_forecast_data[0][:temp][:max]).to be_a(Float)
    expect(daily_forecast_data[0][:temp]).to have_key(:min)
    expect(daily_forecast_data[0][:temp][:min]).to be_a(Float)
    expect(daily_forecast_data[0][:weather]).to be_an(Array)
    expect(daily_forecast_data[0][:weather][0]).to be_an(Hash)
    expect(daily_forecast_data[0][:weather][0]).to have_key(:description)
    expect(daily_forecast_data[0][:weather][0][:description]).to be_a(String)
    expect(daily_forecast_data[0][:weather][0]).to have_key(:icon)
    expect(daily_forecast_data[0][:weather][0][:icon]).to be_a(String)
    hourly_forecast_data = forecast_data[:hourly]
    expect(hourly_forecast_data).to be_an(Array)
    expect(hourly_forecast_data[0]).to be_a(Hash)
    expect(hourly_forecast_data[0]).to have_key(:dt)
    expect(hourly_forecast_data[0][:dt]).to be_an(Integer)
    expect(hourly_forecast_data[0]).to have_key(:temp)
    expect(hourly_forecast_data[0][:temp]).to be_a(Float)
    expect(hourly_forecast_data[0]).to have_key(:wind_speed)
    expect(hourly_forecast_data[0][:wind_speed]).to be_a(Float)
    expect(hourly_forecast_data[0]).to have_key(:wind_deg)
    expect(hourly_forecast_data[0][:wind_deg]).to be_a(Integer)
    expect(hourly_forecast_data[0]).to have_key(:weather)
    expect(hourly_forecast_data[0][:weather]).to be_an(Array)
    expect(hourly_forecast_data[0][:weather][0]).to be_a(Hash)
    expect(hourly_forecast_data[0][:weather][0]).to have_key(:description)
    expect(hourly_forecast_data[0][:weather][0][:description]).to be_a(String)
    expect(hourly_forecast_data[0][:weather][0]).to have_key(:icon)
    expect(hourly_forecast_data[0][:weather][0][:icon]).to be_a(String)
  end
end
